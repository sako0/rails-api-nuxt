name: Docker Image CI/CD

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  Build-And-Push-To-ECS:
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPOSITORY: diet-reader
      ECR_REPOSITORY_FRONT: diet-reader-front
      IMAGE_TAG: latest
      WEB_CONTAINER_NAME: web
      WEB_MIGRATE_CONTAINER_NAME: web-migrate
      FRONTEND_CONTAINER_NAME: frontend
      WEB_TASK_DEFINITION_PATH: aws/web-ecs-task-def.json
      FRONT_TASK_DEFINITION_PATH: aws/front-ecs-task-def.json
      WEB_FAMILY_NAME: diet-reader-task-definition-api
      FRONT_FAMILY_NAME: diet-reader-task-definition-frontend

    steps:
      - uses: actions/checkout@v2

      - name: Replace Name In Task Definition Json
        run: |
          sed -i "s*%WEB_IMAGE%*${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}*g" ${{ env.WEB_TASK_DEFINITION_PATH }}
          sed -i "s*%WEB_CONTAINER_NAME%*${WEB_CONTAINER_NAME}*g" ${{ env.WEB_TASK_DEFINITION_PATH }}
          sed -i "s*%WEB_MIGRATE_CONTAINER_NAME%*${WEB_MIGRATE_CONTAINER_NAME}*g" ${{ env.WEB_TASK_DEFINITION_PATH }}
          sed -i "s*%WEB_FAMILY_NAME%*${APP_FAMILY_NAME}*g" ${{ env.WEB_TASK_DEFINITION_PATH }}
          sed -i "s*%FRONT_IMAGE%*${ECR_REGISTRY}/${ECR_REPOSITORY_FRONT}:${IMAGE_TAG}*g" ${{ env.FRONT_TASK_DEFINITION_PATH }}
          sed -i "s*%FRONTEND_CONTAINER_NAME%*${FRONTEND_CONTAINER_NAME}*g" ${{ env.FRONT_TASK_DEFINITION_PATH }}
          sed -i "s*%FRONT_FAMILY_NAME%*${FRONT_FAMILY_NAME}*g" ${{ env.FRONT_TASK_DEFINITION_PATH }}

      - name: Configure AWS Credentials # AWSアクセス権限設定
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR # ECRログイン処理
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR # apiのECRイメージPush
        run: |
          docker build -f ./Dockerfile -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker build -f ./frontend/Dockerfile -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_FRONT }}:${{ env.IMAGE_TAG }} ./frontend
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_FRONT }}:${{ env.IMAGE_TAG }}

      - name: Render migration task definition # migrationを行うECSタスク定義のレンダリング
        id: render-migration-web-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.WEB_TASK_DEFINITION_PATH }}
          container-name: ${{ env.WEB_MIGRATE_CONTAINER_NAME }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Render WEB ECS task definition # webのECSタスク定義のレンダリング
        id: render-web-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-migration-web-task-definition.outputs.task-definition }}
          container-name: ${{ env.WEB_CONTAINER_NAME }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy to Amazon ECS service # webのECSサービスデプロイ
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-task-definition.outputs.task-definition }}
          service: ${{ secrets.SERVICE_NAME }}
          cluster: ${{ secrets.CLUSTER_NAME }}

      - name: Frontend task definition # frontendのECSタスク定義のレンダリング
        id: render-frontend-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.FRONT_TASK_DEFINITION_PATH }}
          container-name: ${{ env.FRONTEND_CONTAINER_NAME }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_FRONT }}:${{ env.IMAGE_TAG }}
